"use client";
import { useState, useEffect, Suspense } from "react";
import {
  Title,
  Subtitle,
  Card,
  Flex,
  Metric,
  ProgressBar,
  Tab,
  TabGroup,
  TabList,
  TabPanel,
  TabPanels,
  Text,
  Badge,
  BadgeDelta,
  Grid,
  Bold,
} from "@tremor/react";

import { ProgressCircle } from "@tremor/react";

import {
  BellIcon,
  StatusOnlineIcon,
} from "@heroicons/react/solid";

import { getd14, getd15, getd16 } from "../../api/kcvl";

const MRRatio = () => {
  const [dataD14, setDataD14] = useState(null);
  const [dataD15, setDataD15] = useState(null);
  const [dataD16, setDataD16] = useState(null);
  const [resultD14A, setResultD14A] = useState([]);
  const [resultD14B, setResultD14B] = useState([]);
  const [resultD14C, setResultD14C] = useState([]);
  const [resultD14D, setResultD14D] = useState([]);
  const [resultD15E, setResultD15E] = useState([]);
  const [resultD15F, setResultD15F] = useState([]);
  const [resultD15G, setResultD15G] = useState([]);
  const [resultD15H, setResultD15H] = useState([]);
  const [resultD16A, setResultD16A] = useState([]);
  const [resultD16B, setResultD16B] = useState([]);
  const [resultD16C, setResultD16C] = useState([]);
  const [resultD16D, setResultD16D] = useState([]);

  const fetchDataForCode = async (
    code,
    fetchDataFunction,
    setResultFunction
  ) => {
    try {
      const result = await fetchDataFunction(code);
      setResultFunction(result);
      return result; // Add this line to return the fetched data
    } catch (error) {
      // Handle errors if needed
      console.error(`Error fetching data for ${code}:`, error);
    }
  };

  useEffect(() => {
    const fetchData = async () => {
      try {
        const d14Data = await fetchDataForCode("D14", getd14, setDataD14);
        const d14aList = d14Data ? d14Data.filter(item => item.MACHCODE.startsWith("D14A")) : [];
        const d14bList = d14Data ? d14Data.filter(item => item.MACHCODE.startsWith("D14B")) : [];
        const d14cList = d14Data ? d14Data.filter(item => item.MACHCODE.startsWith("D14C")) : [];
        const d14dList = d14Data ? d14Data.filter(item => item.MACHCODE.startsWith("D14D")) : [];
        setResultD14A(d14aList);
        setResultD14B(d14bList);
        setResultD14C(d14cList);
        setResultD14D(d14dList);

        const d15Data = await fetchDataForCode("D15", getd15, setDataD15);
        const d15aList = d15Data ? d15Data.filter(item => item.MACHCODE.startsWith("D15E")) : [];
        const d15bList = d15Data ? d15Data.filter(item => item.MACHCODE.startsWith("D15F")) : [];
        const d15cList = d15Data ? d15Data.filter(item => item.MACHCODE.startsWith("D15G")) : [];
        const d15dList = d15Data ? d15Data.filter(item => item.MACHCODE.startsWith("D15H")) : [];
        setResultD15E(d15aList);
        setResultD15F(d15bList);
        setResultD15G(d15cList);
        setResultD15H(d15dList);

        const d16Data = await fetchDataForCode("D16", getd16, setDataD16);
        const d16aList = d16Data ? d16Data.filter(item => item.MACHCODE.startsWith("D16A")) : [];
        const d16bList = d16Data ? d16Data.filter(item => item.MACHCODE.startsWith("D16B")) : [];
        const d16cList = d16Data ? d16Data.filter(item => item.MACHCODE.startsWith("D16C")) : [];
        const d16dList = d16Data ? d16Data.filter(item => item.MACHCODE.startsWith("D16D")) : [];
        setResultD16A(d16aList)
        setResultD16B(d16bList);
        setResultD16C(d16cList);
        setResultD16D(d16dList);

      } catch (error) {
        // Handle errors if needed
        console.error("Error fetching data:", error);
      }
    };

    fetchData();

    const intervalId = setInterval(fetchData, 60000*10);

    // Cleanup interval on component unmount
    return () => clearInterval(intervalId);

  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  // const DisplayData = ({ data }) => {
  //   console.log(data);
  //   return (
  //     <>
  //       {data.map((item) => (
  //         <div key={item.ID}>
  //           <p>ID: {item.ID}</p>
  //           <p>MACHNAME: {item.MACHNAME}</p>
  //           <p>MC_RATIO: {item.MC_RATIO}%</p>
  //           {/* Add more properties as needed */}
  //         </div>
  //       ))}
  //     </>
  //   );
  // };

  const options = {
    year: "numeric",
    month: "numeric",
    day: "numeric",
    hour: "numeric",
    minute: "numeric",
    second: "numeric",
  };

  const ProgresData = ({ data }) => {
    if (typeof data === "object") {
      // const length = data.length;
      // console.log("Length of the array:", length);
      // console.log(data);

      return (
        <>
          {data.map((item) => (
            <div key={item.MACHCODE}>
              {/* {item.MACHNAME} */}
              <ProgressCircle
                id={item.MACHCODE}
                value={item.MC_RATIO}
                radius={60}
                strokeWidth={10}
                tooltip={`SIGTIME: ${new Date(item.SIGTIME).toLocaleString(
                  "vi",
                  options
                )},  QUALITY: ${item.QUALITY}`}
                color={item.D05000 === "1" ? "emerald" : "slate"}
              >
                <Grid numItems={1}>
                  <Text className="text-center">{item.MACHNAME}</Text>
                  <Badge className="text-center">{item.MC_RATIO}%</Badge>
                </Grid>
              </ProgressCircle>
            </div>
          ))}
        </>
      );
    }
  };

  const YourComponent = ({ data }) => (
    <>
      {data.map((item) => (
        <ProgressCircle
          key={item.ID}
          id={item.ID}
          value={item.MC_RATIO}
          tooltip="radius: 25, strokeWidth: 10"
          color="emerald"
          size="xl"
        >
          <Grid numItems={1}>
            <Metric className="text-center">{item.MACHNAME}</Metric>
            <Title className="text-center">{item.MC_RATIO}%</Title>
          </Grid>
        </ProgressCircle>
      ))}
    </>
  );

  return (
    <main className="card">
      <Title>Machine Running Status</Title>

      <TabGroup>
        <TabList className="mt-0">
          <Tab icon={BellIcon}>D14</Tab>
          <Tab icon={BellIcon}>D15</Tab>
          <Tab icon={BellIcon}>D16</Tab>
        </TabList>
        <TabPanels>
          <TabPanel>
            <strong>LINE A</strong>
            <Card className="flex flex-wrap gap-3 mx-auto">
              {ProgresData(resultD14A)}
            </Card>
            <strong>LINE B</strong>
            <Card className="flex flex-wrap gap-3 mx-auto">
              {ProgresData(resultD14B)}
            </Card>
            <strong>LINE C</strong>
            <Card className="flex flex-wrap gap-3 mx-auto">
              {ProgresData(resultD14C)}
            </Card>
            <strong>LINE D</strong>
            <Card className="flex flex-wrap gap-3 mx-auto">
              {ProgresData(resultD14D)}
            </Card>
          </TabPanel>
          <TabPanel>
            <strong>LINE E</strong>
            <Card className="flex flex-wrap gap-3 mx-auto">
              {ProgresData(resultD15E)}
            </Card>
            <strong>LINE F</strong>
            <Card className="flex flex-wrap gap-3 mx-auto">
              {ProgresData(resultD15F)}
            </Card>
            <strong>LINE G</strong>
            <Card className="flex flex-wrap gap-3 mx-auto">
              {ProgresData(resultD15G)}
            </Card>
            <strong>LINE H</strong>
            <Card className="flex flex-wrap gap-3 mx-auto">
              {ProgresData(resultD15H)}
            </Card>
          </TabPanel>
          <TabPanel>
            <strong>LINE A</strong>
            <Card className="flex flex-wrap gap-3 mx-auto">
              {ProgresData(resultD16A)}
            </Card>
            <strong>LINE B</strong>
            <Card className="flex flex-wrap gap-3 mx-auto">
              {ProgresData(resultD16B)}
            </Card>
            <strong>LINE C</strong>
            <Card className="flex flex-wrap gap-3 mx-auto">
              {ProgresData(resultD16C)}
            </Card>
            <strong>LINE D</strong>
            <Card className="flex flex-wrap gap-3 mx-auto">
              {ProgresData(resultD16C)}
            </Card>
          </TabPanel>
        </TabPanels>
      </TabGroup>

      {/* <Grid numItemsMd={2} numItemsLg={6} className="mt-2 gap-2"></Grid> */}
    </main>
  );
};

export default MRRatio;
